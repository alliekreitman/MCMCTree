filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(id, collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
# print the datanum and datatime lists per patient
for (i in 1:length(patients_in_study)){
curr_data <- genebank_data_df %>%
filter(patient == patients_in_study[i]) %>%  # make curr data frame with one patient
arrange(study_day_collected) # sort data by patient and by study day
# list number of unique collection days
collection_days_list <- unique(curr_data$study_day_collected)
print(patients_in_study[i]) # print patient number
# print list of datatime
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datatime_list = paste(datatime, collapse = "","")))
# print list of datanum
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datanum_list = paste(datanum, collapse = ",")))
for (j in 1:length(collection_days_list)){ # loop through each of the collection days groups to print the data appropriately for the init file
print(curr_data_collection_ids <- curr_data %>%
filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(id, collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
# print the datanum and datatime lists per patient
for (i in 1:length(patients_in_study)){
curr_data <- genebank_data_df %>%
filter(patient == patients_in_study[i]) %>%  # make curr data frame with one patient
arrange(study_day_collected) # sort data by patient and by study day
# list number of unique collection days
collection_days_list <- unique(curr_data$study_day_collected)
print(patients_in_study[i]) # print patient number
# print list of datatime
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datatime_list = paste(datatime, collapse = ",")))
# print list of datanum
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datanum_list = paste(datanum, collapse = ",")))
for (j in 1:length(collection_days_list)){ # loop through each of the collection days groups to print the data appropriately for the init file
print(curr_data_collection_ids <- curr_data %>%
filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(shQuote(id), collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
# print the datanum and datatime lists per patient
for (i in 1:length(patients_in_study)){
curr_data <- genebank_data_df %>%
filter(patient == patients_in_study[i]) %>%  # make curr data frame with one patient
arrange(study_day_collected) # sort data by patient and by study day
# list number of unique collection days
collection_days_list <- unique(curr_data$study_day_collected)
print(patients_in_study[i]) # print patient number
# print list of datatime
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datatime_list = paste(datatime, collapse = ",")))
# print list of datanum
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datanum_list = paste(datanum, collapse = ",")))
for (j in 1:length(collection_days_list)){ # loop through each of the collection days groups to print the data appropriately for the init file
print(curr_data_collection_ids <- curr_data %>%
filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(shQuote(id, type = "cmd"), collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
# print the datanum and datatime lists per patient
for (i in 1:length(patients_in_study)){
curr_data <- genebank_data_df %>%
filter(patient == patients_in_study[i]) %>%  # make curr data frame with one patient
arrange(study_day_collected) # sort data by patient and by study day
# list number of unique collection days
collection_days_list <- unique(curr_data$study_day_collected)
print(patients_in_study[i]) # print patient number
# print list of datatime
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datatime_list = paste(datatime, collapse = ",")))
# print list of datanum
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datanum_list = paste(datanum, collapse = ",")))
for (j in 1:length(collection_days_list)){ # loop through each of the collection days groups to print the data appropriately for the init file
print(curr_data_collection_ids <- curr_data %>%
filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(shQuote(id), collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
# print the datanum and datatime lists per patient
for (i in 1:length(patients_in_study)){
curr_data <- genebank_data_df %>%
filter(patient == patients_in_study[i]) %>%  # make curr data frame with one patient
arrange(study_day_collected) # sort data by patient and by study day
# list number of unique collection days
collection_days_list <- unique(curr_data$study_day_collected)
print(patients_in_study[i]) # print patient number
# print list of datatime
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datatime_list = paste(datatime, collapse = ",")))
# print list of datanum
print(genebank_data_df_summarised %>%
filter(patient == patients_in_study[i]) %>%
summarise(datanum_list = paste(datanum, collapse = ",")))
for (j in 1:length(collection_days_list)){ # loop through each of the collection days groups to print the data appropriately for the init file
print(curr_data_collection_ids <- curr_data %>%
filter(study_day_collected == collection_days_list[j]) %>%
summarise(id = paste(dQuote(id), collapse = ",")))
print(paste0("{", curr_data_collection_ids, "}")) # paste list of accession ids for that datatime
}
}
entrez_fetch(db="nucleotide", id="AY000544", rettype="gb", retmode="text")
# load data
# Read the file
omega_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_omega.txt")
# Process data
omega_results <- tibble(
value1 = as.numeric(omega_lines[seq(1, length(omega_lines), by = 3)]),
value2 = as.numeric(omega_lines[seq(1, length(omega_lines), by = 3)]),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", omega_lines[seq(2, length(omega_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", omega_lines[seq(3, length(omega_lines), by = 3)]))
)
#load libraries
library(tidyverse)
# load data
# Read the file
omega_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_omega.txt")
# Process data
omega_results <- tibble(
value1 = as.numeric(omega_lines[seq(1, length(omega_lines), by = 3)]),
value2 = as.numeric(omega_lines[seq(1, length(omega_lines), by = 3)]),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", omega_lines[seq(2, length(omega_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", omega_lines[seq(3, length(omega_lines), by = 3)]))
)
View(omega_results)
# load data
# Read the file
omega_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_omega.txt")
# Process data
omega_results <- tibble(
value1 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "^[0-9\\.]+")),
value2 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", omega_lines[seq(2, length(omega_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", omega_lines[seq(3, length(omega_lines), by = 3)]))
)
View(omega_results)
mu_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_mu.txt")
mu_results <- tibble(
lambda = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "^[0-9\\.]+")),
Nbegin = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", mu_lines[seq(2, length(mu_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", mu_lines[seq(3, length(mu_lines), by = 3)]))
)
View(mu_results)
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c("lambda", "Nbegin"), names_to = "variable", values_to = "value")
)
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c("omega1", "omega2"), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c("lambda", "Nbegin"), names_to = "variable", values_to = "value")
)
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c(lambda, Nbegin), names_to = "variable", values_to = "value")
)
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value") %>% View()
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value")
rlang::last_trace()
View(omega_results)
# Process data
omega_results <- tibble(
omega1 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "^[0-9\\.]+")),
omega2 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", omega_lines[seq(2, length(omega_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", omega_lines[seq(3, length(omega_lines), by = 3)]))
)
# load data
# Read the file
omega_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_omega.txt")
mu_lines <- readLines("data/20250228_p1_test_run/p1_76807_411274_mu.txt")
# Process data
omega_results <- tibble(
omega1 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "^[0-9\\.]+")),
omega2 = as.numeric(str_extract(omega_lines[seq(1, length(omega_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", omega_lines[seq(2, length(omega_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", omega_lines[seq(3, length(omega_lines), by = 3)]))
)
mu_results <- tibble(
lambda = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "^[0-9\\.]+")),
Nbegin = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", mu_lines[seq(2, length(mu_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", mu_lines[seq(3, length(mu_lines), by = 3)]))
)
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c(lambda, Nbegin), names_to = "variable", values_to = "value")
)
View(omega_mu_results)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omage_mu_results)+
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c(lambda, Nbegin), names_to = "variable", values_to = "value")
)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) %>%
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
theme_bw()+
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)
View(omega_results)
View(omega_mu_results)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
theme_bw()+
geom_point(aes(x = Iter_count, y = value))
max(omega_mu_results$value)
View(omega_mu_results)
glimpse(omega_mu_results)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
# theme_bw()+
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)+
theme_bw()+
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
facet_grid(~variable)+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()+
facet_grid(~variable)
omega_mu_results
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
omega_mu_results %>% desc(value)
omega_mu_results %>% arrange(desc(value))
facet_grid(~variable)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 200)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 2000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 5000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 10000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 20000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 40000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 30000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 35000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 33000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
ggplot(data = head(omega_mu_results))+
geom_hist(x = iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = Iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = Iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_bar(x = Iter_count)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
geom_bar(aes(x = Iter_count))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_bar(aes(x = Iter_count))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_bar(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_bar(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_hist(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_histogram(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), binwidth = 1000)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 100)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 20)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 2)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 1000)+
facet_grid(~variable)
######
# omega1_traceplot <-
ggplot(omega_results, aes(x = Iter_count, y = omega1))+
theme_bw()+
geom_point()
omega2_traceplot <- ggplot(omega_results, aes(x = Iter_count, y = omega2))+
theme_bw()+
geom_point()
omega2_traceplot
lambda_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = lambda))+
theme_bw()+
geom_point()
lambda_traceplot
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()
Nbegin_traceplot
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()+
scale_y_continuous(limits = c(0, max(mu_results$Nbegin))) +  # Set min/max for y-axis
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c(lambda, Nbegin), names_to = "variable", values_to = "value")
)
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()+
scale_y_continuous(limits = c(0, max(mu_results$Nbegin)))  # Set min/max for y-axis
Nbegin_traceplot
max(mu_results$Nbegin
)
omega_mu_results %>% group_by(Iter_count) %>% summarise(count = n()) %>% View
full_join(omega_results, mu_results, by = Iter_count, suffix = c(".omega", ".mu")) %>% View()
View(mu_results)
View(omega_results)
full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>% View()
# Compute ACF using dplyr
acf_data <- full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>%
select(omega1, omega2, lambda, Nbegin) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
group_by(parameter) %>%
summarise(acf_values = list(acf(value, plot = FALSE)$acf),
lags = list(acf(value, plot = FALSE)$lag),
.groups = "drop") %>%
unnest(c(acf_values, lags))
View(acf_data)
# Plot the ACFs using ggplot
ggplot(acf_data, aes(x = lags, y = acf_values)) +
theme_bw()+
geom_line() +
geom_point() +
facet_wrap(~parameter, scales = "free_y") +
labs(title = "Autocorrelation Function (ACF) for Parameters",
x = "Lag",
y = "Autocorrelation")
summary(mu_results$Nbegin)
unique(mu_results$Nbegin)
###### traceplots
omega1_traceplot <- ggplot(omega_results, aes(x = Iter_count, y = omega1))+
theme_bw()+
geom_point()
library(cowplot)
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, Nbegin_traceplot)
traceplots
mu_results <- tibble(
lambda = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "^[0-9\\.]+")),
Nbegin = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", mu_lines[seq(2, length(mu_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", mu_lines[seq(3, length(mu_lines), by = 3)]))
) %>%
mutate(log_Nbegin = log(Nbegin))
View(mu_results)
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = log_Nbegin))+
theme_bw()+
geom_point()
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, Nbegin_traceplot)
Nbegin_traceplot
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, log_Nbegin_traceplot)
traceplots
# Compute ACF using dplyr
acf_data <- full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>%
select(omega1, omega2, lambda, log_Nbegin) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
group_by(parameter) %>%
summarise(acf_values = list(acf(value, plot = FALSE)$acf),
lags = list(acf(value, plot = FALSE)$lag),
.groups = "drop") %>%
unnest(c(acf_values, lags))
# Plot the ACFs
ggplot(acf_data, aes(x = lags, y = acf_values)) +
theme_bw()+
geom_line() +
geom_point() +
facet_wrap(~parameter, scales = "free_y") +
labs(title = "Autocorrelation Function (ACF) for Parameters",
x = "Lag",
y = "Autocorrelation")
traceplots
