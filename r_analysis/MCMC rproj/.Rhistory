theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()+
facet_grid(~variable)
omega_mu_results
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = omega_mu_results) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
omega_mu_results %>% desc(value)
omega_mu_results %>% arrange(desc(value))
facet_grid(~variable)
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 200)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 2000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 5000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 10000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 20000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 40000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 30000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 35000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
# plot the entire chain trace plot -- i.e. make one figure with 4 subplots;
# one subplot for each of the 4 parameters (omega1, omega2, lambda, Nbegin)
ggplot(data = head(omega_mu_results, n = 33000)) +
geom_point(aes(x = Iter_count, y = value))+
theme_bw()
ggplot(data = head(omega_mu_results))+
geom_hist(x = iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = Iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_col(x = Iter_count)+
facet_grid(~variable)
ggplot(data = head(omega_mu_results))+
geom_bar(x = Iter_count)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
geom_bar(aes(x = Iter_count))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_bar(aes(x = Iter_count))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_bar(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_bar(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_hist(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results %>% filter(variable != "Nbegin"))+
theme_bw()+
geom_histogram(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value))+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), binwidth = 1000)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 100)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 20)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 2)+
facet_grid(~variable)
ggplot(data = omega_mu_results)+
theme_bw()+
geom_histogram(aes(x = value), bins = 1000)+
facet_grid(~variable)
######
# omega1_traceplot <-
ggplot(omega_results, aes(x = Iter_count, y = omega1))+
theme_bw()+
geom_point()
omega2_traceplot <- ggplot(omega_results, aes(x = Iter_count, y = omega2))+
theme_bw()+
geom_point()
omega2_traceplot
lambda_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = lambda))+
theme_bw()+
geom_point()
lambda_traceplot
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()
Nbegin_traceplot
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()+
scale_y_continuous(limits = c(0, max(mu_results$Nbegin))) +  # Set min/max for y-axis
# combine dataframes
omega_mu_results <- rbind(
omega_results %>%
pivot_longer(cols = c(omega1, omega2), names_to = "variable", values_to = "value"),
mu_results %>%
pivot_longer(cols = c(lambda, Nbegin), names_to = "variable", values_to = "value")
)
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = Nbegin))+
theme_bw()+
geom_point()+
scale_y_continuous(limits = c(0, max(mu_results$Nbegin)))  # Set min/max for y-axis
Nbegin_traceplot
max(mu_results$Nbegin
)
omega_mu_results %>% group_by(Iter_count) %>% summarise(count = n()) %>% View
full_join(omega_results, mu_results, by = Iter_count, suffix = c(".omega", ".mu")) %>% View()
View(mu_results)
View(omega_results)
full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>% View()
# Compute ACF using dplyr
acf_data <- full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>%
select(omega1, omega2, lambda, Nbegin) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
group_by(parameter) %>%
summarise(acf_values = list(acf(value, plot = FALSE)$acf),
lags = list(acf(value, plot = FALSE)$lag),
.groups = "drop") %>%
unnest(c(acf_values, lags))
View(acf_data)
# Plot the ACFs using ggplot
ggplot(acf_data, aes(x = lags, y = acf_values)) +
theme_bw()+
geom_line() +
geom_point() +
facet_wrap(~parameter, scales = "free_y") +
labs(title = "Autocorrelation Function (ACF) for Parameters",
x = "Lag",
y = "Autocorrelation")
summary(mu_results$Nbegin)
unique(mu_results$Nbegin)
###### traceplots
omega1_traceplot <- ggplot(omega_results, aes(x = Iter_count, y = omega1))+
theme_bw()+
geom_point()
library(cowplot)
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, Nbegin_traceplot)
traceplots
mu_results <- tibble(
lambda = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "^[0-9\\.]+")),
Nbegin = as.numeric(str_extract(mu_lines[seq(1, length(mu_lines), by = 3)], "(?<=\\s)[0-9\\.]+$")),
Unique_Tree_count = as.numeric(gsub("Unique_Tree_count=", "", mu_lines[seq(2, length(mu_lines), by = 3)])),
Iter_count = as.numeric(gsub("Iter_count=", "", mu_lines[seq(3, length(mu_lines), by = 3)]))
) %>%
mutate(log_Nbegin = log(Nbegin))
View(mu_results)
Nbegin_traceplot <- ggplot(mu_results, aes(x = Iter_count, y = log_Nbegin))+
theme_bw()+
geom_point()
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, Nbegin_traceplot)
Nbegin_traceplot
traceplots <- cowplot::plot_grid(omega1_traceplot, omega2_traceplot, lambda_traceplot, log_Nbegin_traceplot)
traceplots
# Compute ACF using dplyr
acf_data <- full_join(omega_results, mu_results, by = "Iter_count", suffix = c(".omega", ".mu")) %>%
select(omega1, omega2, lambda, log_Nbegin) %>%
pivot_longer(everything(), names_to = "parameter", values_to = "value") %>%
group_by(parameter) %>%
summarise(acf_values = list(acf(value, plot = FALSE)$acf),
lags = list(acf(value, plot = FALSE)$lag),
.groups = "drop") %>%
unnest(c(acf_values, lags))
# Plot the ACFs
ggplot(acf_data, aes(x = lags, y = acf_values)) +
theme_bw()+
geom_line() +
geom_point() +
facet_wrap(~parameter, scales = "free_y") +
labs(title = "Autocorrelation Function (ACF) for Parameters",
x = "Lag",
y = "Autocorrelation")
traceplots
# load packages ------
library(tidyverse)
# install.packages("rentrez")
library(rentrez) # package specifically designed to interact with NCBI Entrez databases, including GenBank
# this code is to compile a table of the patient's notes from genebank
# two sets of patients - some included in study and others not, but still have fasta files compiled
# this calls one sample from each patient because comments are the same for all samples of the same patient
patients_ID_in_study <- c(
"AY001661.1", #patient 100
"AY000682.1" #patient 106
)
entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
sample_text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
pattern <- "/note=\"(.*?)\"\\s*\\ngene\\s*<1\\.\\.>984"
matches <- regmatches(sample_text, gregexpr(pattern, sample_text, perl = TRUE))
extracted_text <- gsub('/note="|"\\s*\\ngene\\s*<1\\.\\.>984', '', matches[[1]])
sample_text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
pattern <- "/note=\"(.*?)\"\\s*\\ngene\\s*<1\\.\\.>984"
matches <- regmatches(sample_text, gregexpr(pattern, sample_text, perl = TRUE))
extracted_text <- gsub('/note="|"\\s*\\ngene\\s*<1\\.\\.>984', '', matches[[1]])
sample_text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
# Regular expression to extract content between /note=" and the gene line
pattern <- '/note="([\\s\\S]*?)"\\s*\\ngene\\s*<1\\.\\.>984'
# Extract the match
extracted_text <- str_match(sample_text, pattern)[,2]
# Print the extracted text
print(extracted_text)
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
text
# Regular expression to capture text between /note=" and gene <1..>984
pattern <- "/note=\"([^\"]+)\""
# Extract the match
extracted_text <- str_extract(text, pattern)
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# Print extracted text
print(extracted_text)
# this code is to compile a table of the patient's notes from genebank
# two sets of patients - some included in study and others not, but still have fasta files compiled
# this calls one sample from each patient because comments are the same for all samples of the same patient
patients_ID_in_study <- c(
"AY001661.1", #patient 100
"AY000682.1" #patient 106
)
patients_ID_not_in_study <- c(
"AY000221.1", #patient 11
"AY001527.1" #patient 141
)
patients_all <- c(patients_ID_in_study, patinets_ID_not_in_study)
# this code is to compile a table of the patient's notes from genebank
# two sets of patients - some included in study and others not, but still have fasta files compiled
# this calls one sample from each patient because comments are the same for all samples of the same patient
patients_ID_in_study <- c(
"AY001661.1", #patient 100
"AY000682.1" #patient 106
)
patients_ID_not_in_study <- c(
"AY000221.1", #patient 11
"AY001527.1" #patient 141
)
patients_all <- c(patients_ID_in_study, patients_ID_not_in_study)
therapy_hx_df <- data.frame("ID" = as.character(), "therapy_hx" = as.character())
for (i in 1:length(patients_all)){
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[1], rettype="gb", retmode="text")
# Regular expression to capture text between /note=" and gene <1..>984
pattern <- "/note=\"([^\"]+)\""
# Extract the match
extracted_text <- str_extract(text, pattern)
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# put text of note into growing dataframe
therapy_hx_df$ID[i] <- patients_all[i] # add patient ID
therapy_hx_df$therapy_hx[i] <- extracted_text # add extracted note
}
i = 1
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[i], rettype="gb", retmode="text")
# Regular expression to capture text between /note=" and gene <1..>984
pattern <- "/note=\"([^\"]+)\""
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[i], rettype="gb", retmode="text")
# Extract the match
extracted_text <- str_extract(text, "/note=\"([^\"]+)\"")
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# put text of note into growing dataframe
therapy_hx_df$ID[i] <- patients_all[i] # add patient ID
# put text of note into growing dataframe
therapy_hx_df_tmp <- data.frame("ID" = patients_all[i], "therapy_hx" = extracted_text)
therapy_hx_df <- rbind(therapy_hx_df, therapy_hx_df_tmp)
View(therapy_hx_df)
patients_all <- c(patients_ID_in_study, patients_ID_not_in_study)
therapy_hx_df <- data.frame("ID" = as.character(), "therapy_hx" = as.character())
for (i in 1:length(patients_all)){
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[i], rettype="gb", retmode="text")
# Extract the match
extracted_text <- str_extract(text, "/note=\"([^\"]+)\"")
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# put text of note into growing dataframe
therapy_hx_df_tmp <- data.frame("ID" = patients_all[i], "therapy_hx" = extracted_text)
therapy_hx_df <- rbind(therapy_hx_df, therapy_hx_df_tmp)
# remove tmp df
rm(therapy_hx_df_tmp)
}
View(therapy_hx_df)
i = 3
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_ID_in_study[i], rettype="gb", retmode="text")
entrez_fetch(db="nucleotide", id="AY000221.1", rettype="gb", retmode="text")
patients_all
patients_all[3]
# this code is to compile a table of the patient's notes from genebank
# two sets of patients - some included in study and others not, but still have fasta files compiled
# this calls one sample from each patient because comments are the same for all samples of the same patient
patients_ID_in_study <- c(
"AY001661.1", #patient 100
"AY000682.1" #patient 106
)
patients_ID_not_in_study <- c(
"AY000221.1", #patient 11
"AY001527.1" #patient 141
)
patients_all <- c(patients_ID_in_study, patients_ID_not_in_study)
therapy_hx_df <- data.frame("ID" = as.character(), "therapy_hx" = as.character())
for (i in 1:length(patients_all)){
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_all[i], rettype="gb", retmode="text")
# Extract the match
extracted_text <- str_extract(text, "/note=\"([^\"]+)\"")
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# put text of note into growing dataframe
therapy_hx_df_tmp <- data.frame("ID" = patients_all[i], "therapy_hx" = extracted_text)
therapy_hx_df <- rbind(therapy_hx_df, therapy_hx_df_tmp)
# remove tmp df
rm(therapy_hx_df_tmp)
}
View(therapy_hx_df)
# this code is to compile a table of the patient's notes from genebank
# two sets of patients - some included in study and others not, but still have fasta files compiled
# this calls one sample from each patient because comments are the same for all samples of the same patient
patients_ID_in_study <- c(
"AY001661.1", #patient 100
"AY000682.1", #patient 106
"AY001619.1", #patient 126
"AY001563.1", #patient 132
"AY000421.1", #patient 1
"AY000828.1", #patient 21
"AY000587.1", #patient 26
"AY000540.1", #patient 28
"AY000759.1", #patient 55
"AY001157.1", #patient 60
"AY000913.1" #patient 69
)
patients_ID_not_in_study <- c(
"AY000221.1", #patient 11
"AY001527.1", #patient 141
"AY000157.1", #patient 14
"AY001961.1", #patient 155
"AY001381.1", #patient 156
"AY000282.1", #patient 15
"AY000363.1", #patient 20
"AY000252.1", #patient 3
"AY001081.1", #patient 85
"AY002087.1", #patient 86
"AY001305.1", #patient 87
"AY001497.1" #patient 93
)
patients_all <- c(patients_ID_in_study, patients_ID_not_in_study)
therapy_hx_df <- data.frame("ID" = as.character(), "therapy_hx" = as.character())
for (i in 1:length(patients_all)){
# pull metadata from genebank using API
text <- entrez_fetch(db="nucleotide", id=patients_all[i], rettype="gb", retmode="text")
# Extract the match
extracted_text <- str_extract(text, "/note=\"([^\"]+)\"")
# Remove the `/note="` part to keep only the relevant information
extracted_text <- gsub('/note="', '', extracted_text)
# put text of note into growing dataframe
therapy_hx_df_tmp <- data.frame("ID" = patients_all[i], "therapy_hx" = extracted_text)
therapy_hx_df <- rbind(therapy_hx_df, therapy_hx_df_tmp)
# remove tmp df
rm(therapy_hx_df_tmp)
}
# add column of patient number based on note
therapy_hx_df <- therapy_hx_df %>%
mutate(patient = str_extract(therapy_hx, "P\\d+"))
View(therapy_hx_df)
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = ifelse(ID %in% patients_ID_in_study, "y", ifelse(ID %in% "patients_ID_not_in_study", "n", "ruh-roh")))
View(therapy_hx_df)
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh")
)
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# clean up double spaces in text
mutate(therapy_hx = gsub("\\s+", " ", therapy_hx)) %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh") %>%
)
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# clean up double spaces in text
mutate(therapy_hx = gsub("\\s+", " ", therapy_hx)) %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh")
) %>%
# therapy change day present?
mutate(therapy_change_date_present_yn = if_else(str_extract("then later switched to", therapy_hx), "n", "y"))
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# clean up double spaces in text
mutate(therapy_hx = gsub("\\s+", " ", therapy_hx)) %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh")
) %>%
# therapy change day present?
mutate(therapy_change_date_present_yn = ifelse(str_extract("then later switched to", therapy_hx), "n", "y"))
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# clean up double spaces in text
mutate(therapy_hx = gsub("\\s+", " ", therapy_hx)) %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh")
) %>%
# therapy change day present?
mutate(therapy_change_date_present_yn = ifelse(str_extract("then later switched to", therapy_hx) == T, "n", "y"))
# add more metadata to df
therapy_hx_df <- therapy_hx_df %>%
# clean up double spaces in text
mutate(therapy_hx = gsub("\\s+", " ", therapy_hx)) %>%
# add patient number
mutate(patient = str_extract(therapy_hx, "P\\d+")) %>%
# add column for whether they were included in the OG analysis
mutate(in_OG_analyis = case_when(ID %in% patients_ID_in_study ~ "y",
ID %in% patients_ID_not_in_study ~ "n",
TRUE ~ "ruh-roh")
) %>%
# therapy change day present?
mutate(therapy_change_date_present_yn = ifelse(
str_detect(therapy_hx, "then later switched to"),  # Check if phrase exists
"n",  # If phrase exists
"y"   # If phrase does not exist
))
View(therapy_change_date_present_yn)
View(therapy_hx_df)
# save therapy_hx_df table
write.csv(x = therapy_hx_df, file = "data/20250328_genebank_note_df.csv", row.names=FALSE)
